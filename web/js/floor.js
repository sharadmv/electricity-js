// Generated by CoffeeScript 1.3.3
(function() {
  var Device, SERVER_IP, createDevices, createFloor, createHtml, d, selectDevice, setupMouseDownEvents,
    __slice = [].slice;

  $(document).ready(function() {
    var Path, Rectangle, bridge, canvas;
    Path = paper.Path, Rectangle = paper.Rectangle;
    window.gDevices = [];
    window.gCurrDevice = null;
    createHtml();
    canvas = document.getElementById('floor-plan');
    paper.setup(canvas);
    createFloor();
    createDevices();
    setupMouseDownEvents();
    paper.view.draw();
    paper.view.onFrame = function() {
      var device, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = gDevices.length; _i < _len; _i++) {
        device = gDevices[_i];
        if (device.state) {
          _results.push(device.onFrame());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    selectDevice(gDevices[0]);
    bridge = new Bridge({
      apiKey: "245b536642b8bbe7"
    });
    bridge.connect();
    return bridge.getService("electrify-service", function(e) {
      return e.subscribe({
        broadcast: function(id, data, state) {
          var device, _i, _len, _results;
          d(id, data, state);
          _results = [];
          for (_i = 0, _len = gDevices.length; _i < _len; _i++) {
            device = gDevices[_i];
            if (device.remoteId === parseInt(id)) {
              _results.push(device.state = state);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      });
    });
  });

  SERVER_IP = "192.168.1.179:8080";

  createHtml = function() {
    var htmlStr;
    htmlStr = thermos.render(function() {
      this.h1('Electrify.js');
      this.div("#content", function() {
        return this.div({
          'class': 'btn-group'
        }, function() {
          this.button({
            'class': 'btn custom-nav'
          }, 'Dashboard');
          return this.button({
            'class': 'btn custom-nav'
          }, 'Floor');
        });
      });
      this.div('#bottom-panel', function() {
        this.span('#name-label', 'Mac');
        this.span('#id-label', '5');
        this.span('#state-label', 'ON');
        this.input({
          'type': 'button',
          'value': 'toggle',
          'id': 'toggle-btn'
        });
        this.img({
          'id': 'detail-img',
          'src': 'images/lamp.png'
        });
        this.input({
          'type': 'text',
          'value': '12',
          'id': 'time-val'
        });
        this.span('seconds');
        this.input({
          'type': 'button',
          'value': 'Schedule',
          'id': 'schedule-btn'
        });
        this.input({
          'type': 'checkbox',
          'value': 'Repeat',
          'id': 'repeat-btn'
        });
        return this.span('Repeat');
      });
      return this.canvas({
        'id': 'floor-plan',
        'resize': ''
      });
    });
    $('#main').html(htmlStr);
    $('#toggle-btn').click(function() {
      d(gCurrDevice.remoteId);
      if (gCurrDevice) {
        return $.post('http://' + SERVER_IP + '/api/' + gCurrDevice.remoteId, {
          'method': 'toggle'
        }, function(data) {
          console.log('crap');
          return console.log(data);
        });
      }
    });
    return $('#schedule-btn').click(function() {
      var repeat, time, timeoutFn;
      d(parseInt($('#time-val').val()));
      if ($('#repeat-btn').attr('checked')) {
        repeat = true;
      } else {
        repeat = false;
      }
      timeoutFn = function() {
        return $.post('http://' + SERVER_IP + '/api/' + gCurrDevice.remoteId, {
          'method': 'toggle'
        }, function(data) {});
      };
      time = parseInt($('#time-val').val()) * 1000;
      d(repeat);
      if (repeat) {
        return setInterval(timeoutFn, time);
      } else {
        return setTimeout(timeoutFn, time);
      }
    });
  };

  createFloor = function() {
    var myPath, room1, room2, room3, room4;
    myPath = new paper.Path();
    myPath.strokeColor = 'black';
    myPath.add(new paper.Point(10, 90));
    myPath.add(new paper.Point(200, 90));
    myPath.add(new paper.Point(200, 20));
    myPath.add(new paper.Point(250, 0));
    myPath.add(new paper.Point(300, 20));
    myPath.add(new paper.Point(300, 90));
    myPath.add(new paper.Point(400, 90));
    myPath.add(new paper.Point(450, 90));
    myPath.add(new paper.Point(800, 90));
    myPath.add(new paper.Point(800, 390));
    myPath.add(new paper.Point(10, 390));
    myPath.closed = true;
    room1 = new paper.Path.Rectangle([10, 90], [190, 140]);
    room2 = new paper.Path.Rectangle([10, 230], [190, 160]);
    room3 = new paper.Path.Rectangle([400, 230], [190, 160]);
    room4 = new paper.Path.Rectangle([590, 230], [210, 160]);
    room1.strokeColor = 'black';
    room1.fillColor = '#cccccc';
    room2.strokeColor = 'black';
    room3.strokeColor = 'black';
    return room4.strokeColor = 'black';
  };

  createDevices = function() {
    var circleInfo, info;
    circleInfo = [[[110, 300], 1, "Light"], [[300, 200], 2, "Toaster"], [[700, 310], 3, "Speakers"]];
    return window.gDevices = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = circleInfo.length; _i < _len; _i++) {
        info = circleInfo[_i];
        _results.push(new Device(info[2], info[0], info[1]));
      }
      return _results;
    })();
  };

  Device = (function() {

    Device.prototype.RADIUS = 20;

    function Device(name, coords, remoteId) {
      var circle;
      this.name = name;
      this.coords = coords;
      this.remoteId = remoteId;
      circle = new paper.Path.Circle(this.coords, 10);
      circle.strokeColor = "blue";
      circle.fillColor = "blue";
      circle.name = this.name;
      this.originalRadius = circle.bounds.width / 2;
      this.ui = circle;
      this.scale = 1.01;
      this.state = false;
    }

    Device.prototype.onFrame = function() {
      var radius;
      radius = this.ui.bounds.width / 2;
      if ((radius / this.originalRadius) > 2) {
        this.scale = 0.99;
      }
      if ((radius / this.originalRadius) < 1) {
        this.scale = 1.01;
      }
      return this.ui.scale(this.scale);
    };

    Device.prototype.updateDetailPanel = function() {
      $('#id-label').text('ID: ' + this.remoteId);
      $('#name-label').text(this.name);
      $('#type-label').text('Computer');
      $('#state-label').text((this.state ? 'ON' : 'OFF'));
      return $('#detail-img').attr('src', 'images/' + this.name.toLowerCase() + '.png');
    };

    Device.prototype.select = function() {
      this.ui.strokeColor = "black";
      return this.ui.strokeWidth = 5;
    };

    Device.prototype.deselect = function() {
      return this.ui.strokeColor = "blue";
    };

    return Device;

  })();

  selectDevice = function(device) {
    device.updateDetailPanel();
    if (window.gCurrDevice) {
      window.gCurrDevice.deselect();
    }
    window.gCurrDevice = device;
    return device.select();
  };

  setupMouseDownEvents = function() {
    var hitOptions, hitTool;
    hitOptions = {
      segments: true,
      stroke: true,
      fill: true,
      tolerance: 5
    };
    hitTool = new paper.Tool();
    hitTool.activate();
    return hitTool.onMouseDown = function(event) {
      var device, hitResult, _i, _len, _results;
      hitResult = paper.project.hitTest(event.point, hitOptions);
      if (hitResult) {
        _results = [];
        for (_i = 0, _len = gDevices.length; _i < _len; _i++) {
          device = gDevices[_i];
          if (hitResult.item._id === device.ui._id) {
            _results.push(selectDevice(device));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
  };

  d = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, args);
  };

}).call(this);
